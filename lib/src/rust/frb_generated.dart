// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/database.dart';
import 'api/simple.dart';
import 'api/system.dart';
import 'api/wenku8.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'wenku8/models.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1005110315;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_wild',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<String> crateApiWenku8ChapterContent(
      {required String aid, required String cid});

  Future<String> crateApiSystemDesktopRoot();

  Future<Uint8List> crateApiWenku8DownloadCheckcode();

  Future<Uint8List> crateApiWenku8DownloadImage({required String url});

  String crateApiSimpleGreet({required String name});

  Future<List<HomeBlock>> crateApiWenku8Index();

  Future<void> crateApiSystemInit({required String root});

  Future<void> crateApiSimpleInitApp();

  Future<List<ReadingHistory>> crateApiWenku8ListReadingHistory(
      {required int offset, required int limit});

  Future<String> crateApiDatabaseLoadProperty({required String key});

  Future<ReadingHistory?> crateApiWenku8NovelHistoryById(
      {required String novelId});

  Future<NovelInfo> crateApiWenku8NovelInfo({required String aid});

  Future<List<Volume>> crateApiWenku8NovelReader({required String aid});

  Future<bool> crateApiWenku8PreLoginState();

  Future<void> crateApiDatabaseSaveProperty(
      {required String key, required String value});

  Future<void> crateApiWenku8UpdateHistory(
      {required String novelId,
      required String novelName,
      required String volumeId,
      required String volumeName,
      required String chapterId,
      required String chapterTitle,
      required int progress,
      required String cover,
      required String author});

  Future<UserDetail> crateApiWenku8UserDetail();

  Future<List<BookshelfItem>> crateApiWenku8Wenku8GetBookshelf();

  Future<void> crateApiWenku8Wenku8Login(
      {required String username,
      required String password,
      required String checkcode});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> crateApiWenku8ChapterContent(
      {required String aid, required String cid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(aid, serializer);
        sse_encode_String(cid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8ChapterContentConstMeta,
      argValues: [aid, cid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8ChapterContentConstMeta =>
      const TaskConstMeta(
        debugName: "chapter_content",
        argNames: ["aid", "cid"],
      );

  @override
  Future<String> crateApiSystemDesktopRoot() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSystemDesktopRootConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemDesktopRootConstMeta => const TaskConstMeta(
        debugName: "desktop_root",
        argNames: [],
      );

  @override
  Future<Uint8List> crateApiWenku8DownloadCheckcode() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8DownloadCheckcodeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8DownloadCheckcodeConstMeta =>
      const TaskConstMeta(
        debugName: "download_checkcode",
        argNames: [],
      );

  @override
  Future<Uint8List> crateApiWenku8DownloadImage({required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8DownloadImageConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8DownloadImageConstMeta =>
      const TaskConstMeta(
        debugName: "download_image",
        argNames: ["url"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<List<HomeBlock>> crateApiWenku8Index() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_home_block,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8IndexConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8IndexConstMeta => const TaskConstMeta(
        debugName: "index",
        argNames: [],
      );

  @override
  Future<void> crateApiSystemInit({required String root}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(root, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSystemInitConstMeta,
      argValues: [root],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInitConstMeta => const TaskConstMeta(
        debugName: "init",
        argNames: ["root"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<List<ReadingHistory>> crateApiWenku8ListReadingHistory(
      {required int offset, required int limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(offset, serializer);
        sse_encode_i_32(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_reading_history,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8ListReadingHistoryConstMeta,
      argValues: [offset, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8ListReadingHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "list_reading_history",
        argNames: ["offset", "limit"],
      );

  @override
  Future<String> crateApiDatabaseLoadProperty({required String key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseLoadPropertyConstMeta,
      argValues: [key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseLoadPropertyConstMeta =>
      const TaskConstMeta(
        debugName: "load_property",
        argNames: ["key"],
      );

  @override
  Future<ReadingHistory?> crateApiWenku8NovelHistoryById(
      {required String novelId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(novelId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_reading_history,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8NovelHistoryByIdConstMeta,
      argValues: [novelId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8NovelHistoryByIdConstMeta =>
      const TaskConstMeta(
        debugName: "novel_history_by_id",
        argNames: ["novelId"],
      );

  @override
  Future<NovelInfo> crateApiWenku8NovelInfo({required String aid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(aid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_novel_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8NovelInfoConstMeta,
      argValues: [aid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8NovelInfoConstMeta => const TaskConstMeta(
        debugName: "novel_info",
        argNames: ["aid"],
      );

  @override
  Future<List<Volume>> crateApiWenku8NovelReader({required String aid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(aid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_volume,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8NovelReaderConstMeta,
      argValues: [aid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8NovelReaderConstMeta => const TaskConstMeta(
        debugName: "novel_reader",
        argNames: ["aid"],
      );

  @override
  Future<bool> crateApiWenku8PreLoginState() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8PreLoginStateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8PreLoginStateConstMeta =>
      const TaskConstMeta(
        debugName: "pre_login_state",
        argNames: [],
      );

  @override
  Future<void> crateApiDatabaseSaveProperty(
      {required String key, required String value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDatabaseSavePropertyConstMeta,
      argValues: [key, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDatabaseSavePropertyConstMeta =>
      const TaskConstMeta(
        debugName: "save_property",
        argNames: ["key", "value"],
      );

  @override
  Future<void> crateApiWenku8UpdateHistory(
      {required String novelId,
      required String novelName,
      required String volumeId,
      required String volumeName,
      required String chapterId,
      required String chapterTitle,
      required int progress,
      required String cover,
      required String author}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(novelId, serializer);
        sse_encode_String(novelName, serializer);
        sse_encode_String(volumeId, serializer);
        sse_encode_String(volumeName, serializer);
        sse_encode_String(chapterId, serializer);
        sse_encode_String(chapterTitle, serializer);
        sse_encode_i_32(progress, serializer);
        sse_encode_String(cover, serializer);
        sse_encode_String(author, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8UpdateHistoryConstMeta,
      argValues: [
        novelId,
        novelName,
        volumeId,
        volumeName,
        chapterId,
        chapterTitle,
        progress,
        cover,
        author
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8UpdateHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "update_history",
        argNames: [
          "novelId",
          "novelName",
          "volumeId",
          "volumeName",
          "chapterId",
          "chapterTitle",
          "progress",
          "cover",
          "author"
        ],
      );

  @override
  Future<UserDetail> crateApiWenku8UserDetail() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_detail,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8UserDetailConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8UserDetailConstMeta => const TaskConstMeta(
        debugName: "user_detail",
        argNames: [],
      );

  @override
  Future<List<BookshelfItem>> crateApiWenku8Wenku8GetBookshelf() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bookshelf_item,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8Wenku8GetBookshelfConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8Wenku8GetBookshelfConstMeta =>
      const TaskConstMeta(
        debugName: "wenku8_get_bookshelf",
        argNames: [],
      );

  @override
  Future<void> crateApiWenku8Wenku8Login(
      {required String username,
      required String password,
      required String checkcode}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        sse_encode_String(checkcode, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWenku8Wenku8LoginConstMeta,
      argValues: [username, password, checkcode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWenku8Wenku8LoginConstMeta => const TaskConstMeta(
        debugName: "wenku8_login",
        argNames: ["username", "password", "checkcode"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BookshelfItem dco_decode_bookshelf_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BookshelfItem(
      novel: dco_decode_novel(arr[0]),
      lastRead: dco_decode_String(arr[1]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ReadingHistory dco_decode_box_autoadd_reading_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_reading_history(raw);
  }

  @protected
  Chapter dco_decode_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Chapter(
      title: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      cid: dco_decode_String(arr[2]),
      aid: dco_decode_String(arr[3]),
    );
  }

  @protected
  HomeBlock dco_decode_home_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return HomeBlock(
      title: dco_decode_String(arr[0]),
      list: dco_decode_list_novel_cover(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<BookshelfItem> dco_decode_list_bookshelf_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bookshelf_item).toList();
  }

  @protected
  List<Chapter> dco_decode_list_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_chapter).toList();
  }

  @protected
  List<HomeBlock> dco_decode_list_home_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_home_block).toList();
  }

  @protected
  List<NovelCover> dco_decode_list_novel_cover(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_novel_cover).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ReadingHistory> dco_decode_list_reading_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_reading_history).toList();
  }

  @protected
  List<Volume> dco_decode_list_volume(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_volume).toList();
  }

  @protected
  Novel dco_decode_novel(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Novel(
      id: dco_decode_String(arr[0]),
      title: dco_decode_String(arr[1]),
      author: dco_decode_String(arr[2]),
      coverUrl: dco_decode_String(arr[3]),
      lastChapter: dco_decode_String(arr[4]),
      tags: dco_decode_list_String(arr[5]),
    );
  }

  @protected
  NovelCover dco_decode_novel_cover(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return NovelCover(
      title: dco_decode_String(arr[0]),
      img: dco_decode_String(arr[1]),
      detailUrl: dco_decode_String(arr[2]),
      aid: dco_decode_String(arr[3]),
    );
  }

  @protected
  NovelInfo dco_decode_novel_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return NovelInfo(
      title: dco_decode_String(arr[0]),
      author: dco_decode_String(arr[1]),
      status: dco_decode_String(arr[2]),
      finUpdate: dco_decode_String(arr[3]),
      imgUrl: dco_decode_String(arr[4]),
      introduce: dco_decode_String(arr[5]),
      tags: dco_decode_list_String(arr[6]),
      heat: dco_decode_String(arr[7]),
      trending: dco_decode_String(arr[8]),
      isAnimated: dco_decode_bool(arr[9]),
    );
  }

  @protected
  ReadingHistory? dco_decode_opt_box_autoadd_reading_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_reading_history(raw);
  }

  @protected
  ReadingHistory dco_decode_reading_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ReadingHistory(
      novelId: dco_decode_String(arr[0]),
      novelName: dco_decode_String(arr[1]),
      volumeId: dco_decode_String(arr[2]),
      volumeName: dco_decode_String(arr[3]),
      chapterId: dco_decode_String(arr[4]),
      chapterTitle: dco_decode_String(arr[5]),
      lastReadAt: dco_decode_i_64(arr[6]),
      progress: dco_decode_i_32(arr[7]),
      cover: dco_decode_String(arr[8]),
      author: dco_decode_String(arr[9]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UserDetail dco_decode_user_detail(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 20)
      throw Exception('unexpected arr length: expect 20 but see ${arr.length}');
    return UserDetail(
      username: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      nickname: dco_decode_String(arr[2]),
      level: dco_decode_String(arr[3]),
      title: dco_decode_String(arr[4]),
      sex: dco_decode_String(arr[5]),
      email: dco_decode_String(arr[6]),
      qq: dco_decode_String(arr[7]),
      msn: dco_decode_String(arr[8]),
      web: dco_decode_String(arr[9]),
      registerDate: dco_decode_String(arr[10]),
      contributePoint: dco_decode_String(arr[11]),
      experienceValue: dco_decode_String(arr[12]),
      holdingPoints: dco_decode_String(arr[13]),
      quantityOfFriends: dco_decode_String(arr[14]),
      quantityOfMail: dco_decode_String(arr[15]),
      quantityOfCollection: dco_decode_String(arr[16]),
      quantityOfRecommendDaily: dco_decode_String(arr[17]),
      personalizedSignature: dco_decode_String(arr[18]),
      personalizedDescription: dco_decode_String(arr[19]),
    );
  }

  @protected
  Volume dco_decode_volume(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Volume(
      id: dco_decode_String(arr[0]),
      title: dco_decode_String(arr[1]),
      chapters: dco_decode_list_chapter(arr[2]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BookshelfItem sse_decode_bookshelf_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_novel = sse_decode_novel(deserializer);
    var var_lastRead = sse_decode_String(deserializer);
    return BookshelfItem(novel: var_novel, lastRead: var_lastRead);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ReadingHistory sse_decode_box_autoadd_reading_history(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_reading_history(deserializer));
  }

  @protected
  Chapter sse_decode_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_cid = sse_decode_String(deserializer);
    var var_aid = sse_decode_String(deserializer);
    return Chapter(title: var_title, url: var_url, cid: var_cid, aid: var_aid);
  }

  @protected
  HomeBlock sse_decode_home_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_list = sse_decode_list_novel_cover(deserializer);
    return HomeBlock(title: var_title, list: var_list);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<BookshelfItem> sse_decode_list_bookshelf_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BookshelfItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bookshelf_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<Chapter> sse_decode_list_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Chapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_chapter(deserializer));
    }
    return ans_;
  }

  @protected
  List<HomeBlock> sse_decode_list_home_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HomeBlock>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_home_block(deserializer));
    }
    return ans_;
  }

  @protected
  List<NovelCover> sse_decode_list_novel_cover(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NovelCover>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_novel_cover(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ReadingHistory> sse_decode_list_reading_history(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ReadingHistory>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_reading_history(deserializer));
    }
    return ans_;
  }

  @protected
  List<Volume> sse_decode_list_volume(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Volume>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_volume(deserializer));
    }
    return ans_;
  }

  @protected
  Novel sse_decode_novel(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_coverUrl = sse_decode_String(deserializer);
    var var_lastChapter = sse_decode_String(deserializer);
    var var_tags = sse_decode_list_String(deserializer);
    return Novel(
        id: var_id,
        title: var_title,
        author: var_author,
        coverUrl: var_coverUrl,
        lastChapter: var_lastChapter,
        tags: var_tags);
  }

  @protected
  NovelCover sse_decode_novel_cover(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_img = sse_decode_String(deserializer);
    var var_detailUrl = sse_decode_String(deserializer);
    var var_aid = sse_decode_String(deserializer);
    return NovelCover(
        title: var_title, img: var_img, detailUrl: var_detailUrl, aid: var_aid);
  }

  @protected
  NovelInfo sse_decode_novel_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_finUpdate = sse_decode_String(deserializer);
    var var_imgUrl = sse_decode_String(deserializer);
    var var_introduce = sse_decode_String(deserializer);
    var var_tags = sse_decode_list_String(deserializer);
    var var_heat = sse_decode_String(deserializer);
    var var_trending = sse_decode_String(deserializer);
    var var_isAnimated = sse_decode_bool(deserializer);
    return NovelInfo(
        title: var_title,
        author: var_author,
        status: var_status,
        finUpdate: var_finUpdate,
        imgUrl: var_imgUrl,
        introduce: var_introduce,
        tags: var_tags,
        heat: var_heat,
        trending: var_trending,
        isAnimated: var_isAnimated);
  }

  @protected
  ReadingHistory? sse_decode_opt_box_autoadd_reading_history(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_reading_history(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ReadingHistory sse_decode_reading_history(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_novelId = sse_decode_String(deserializer);
    var var_novelName = sse_decode_String(deserializer);
    var var_volumeId = sse_decode_String(deserializer);
    var var_volumeName = sse_decode_String(deserializer);
    var var_chapterId = sse_decode_String(deserializer);
    var var_chapterTitle = sse_decode_String(deserializer);
    var var_lastReadAt = sse_decode_i_64(deserializer);
    var var_progress = sse_decode_i_32(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    return ReadingHistory(
        novelId: var_novelId,
        novelName: var_novelName,
        volumeId: var_volumeId,
        volumeName: var_volumeName,
        chapterId: var_chapterId,
        chapterTitle: var_chapterTitle,
        lastReadAt: var_lastReadAt,
        progress: var_progress,
        cover: var_cover,
        author: var_author);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UserDetail sse_decode_user_detail(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_nickname = sse_decode_String(deserializer);
    var var_level = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_sex = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_qq = sse_decode_String(deserializer);
    var var_msn = sse_decode_String(deserializer);
    var var_web = sse_decode_String(deserializer);
    var var_registerDate = sse_decode_String(deserializer);
    var var_contributePoint = sse_decode_String(deserializer);
    var var_experienceValue = sse_decode_String(deserializer);
    var var_holdingPoints = sse_decode_String(deserializer);
    var var_quantityOfFriends = sse_decode_String(deserializer);
    var var_quantityOfMail = sse_decode_String(deserializer);
    var var_quantityOfCollection = sse_decode_String(deserializer);
    var var_quantityOfRecommendDaily = sse_decode_String(deserializer);
    var var_personalizedSignature = sse_decode_String(deserializer);
    var var_personalizedDescription = sse_decode_String(deserializer);
    return UserDetail(
        username: var_username,
        userId: var_userId,
        nickname: var_nickname,
        level: var_level,
        title: var_title,
        sex: var_sex,
        email: var_email,
        qq: var_qq,
        msn: var_msn,
        web: var_web,
        registerDate: var_registerDate,
        contributePoint: var_contributePoint,
        experienceValue: var_experienceValue,
        holdingPoints: var_holdingPoints,
        quantityOfFriends: var_quantityOfFriends,
        quantityOfMail: var_quantityOfMail,
        quantityOfCollection: var_quantityOfCollection,
        quantityOfRecommendDaily: var_quantityOfRecommendDaily,
        personalizedSignature: var_personalizedSignature,
        personalizedDescription: var_personalizedDescription);
  }

  @protected
  Volume sse_decode_volume(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_chapters = sse_decode_list_chapter(deserializer);
    return Volume(id: var_id, title: var_title, chapters: var_chapters);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bookshelf_item(BookshelfItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_novel(self.novel, serializer);
    sse_encode_String(self.lastRead, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_reading_history(
      ReadingHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_reading_history(self, serializer);
  }

  @protected
  void sse_encode_chapter(Chapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.cid, serializer);
    sse_encode_String(self.aid, serializer);
  }

  @protected
  void sse_encode_home_block(HomeBlock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_list_novel_cover(self.list, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bookshelf_item(
      List<BookshelfItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bookshelf_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_chapter(List<Chapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_chapter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_home_block(
      List<HomeBlock> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_home_block(item, serializer);
    }
  }

  @protected
  void sse_encode_list_novel_cover(
      List<NovelCover> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_novel_cover(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_reading_history(
      List<ReadingHistory> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_reading_history(item, serializer);
    }
  }

  @protected
  void sse_encode_list_volume(List<Volume> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_volume(item, serializer);
    }
  }

  @protected
  void sse_encode_novel(Novel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.coverUrl, serializer);
    sse_encode_String(self.lastChapter, serializer);
    sse_encode_list_String(self.tags, serializer);
  }

  @protected
  void sse_encode_novel_cover(NovelCover self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.img, serializer);
    sse_encode_String(self.detailUrl, serializer);
    sse_encode_String(self.aid, serializer);
  }

  @protected
  void sse_encode_novel_info(NovelInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.finUpdate, serializer);
    sse_encode_String(self.imgUrl, serializer);
    sse_encode_String(self.introduce, serializer);
    sse_encode_list_String(self.tags, serializer);
    sse_encode_String(self.heat, serializer);
    sse_encode_String(self.trending, serializer);
    sse_encode_bool(self.isAnimated, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_reading_history(
      ReadingHistory? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_reading_history(self, serializer);
    }
  }

  @protected
  void sse_encode_reading_history(
      ReadingHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.novelId, serializer);
    sse_encode_String(self.novelName, serializer);
    sse_encode_String(self.volumeId, serializer);
    sse_encode_String(self.volumeName, serializer);
    sse_encode_String(self.chapterId, serializer);
    sse_encode_String(self.chapterTitle, serializer);
    sse_encode_i_64(self.lastReadAt, serializer);
    sse_encode_i_32(self.progress, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_String(self.author, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user_detail(UserDetail self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.nickname, serializer);
    sse_encode_String(self.level, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.sex, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.qq, serializer);
    sse_encode_String(self.msn, serializer);
    sse_encode_String(self.web, serializer);
    sse_encode_String(self.registerDate, serializer);
    sse_encode_String(self.contributePoint, serializer);
    sse_encode_String(self.experienceValue, serializer);
    sse_encode_String(self.holdingPoints, serializer);
    sse_encode_String(self.quantityOfFriends, serializer);
    sse_encode_String(self.quantityOfMail, serializer);
    sse_encode_String(self.quantityOfCollection, serializer);
    sse_encode_String(self.quantityOfRecommendDaily, serializer);
    sse_encode_String(self.personalizedSignature, serializer);
    sse_encode_String(self.personalizedDescription, serializer);
  }

  @protected
  void sse_encode_volume(Volume self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_list_chapter(self.chapters, serializer);
  }
}
